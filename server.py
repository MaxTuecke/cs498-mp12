from kubernetes import client, config
from flask import Flask,request, Response
from os import path
import yaml, random, string, json
import sys
import json

# Configs can be set in Configuration class directly or using helper utility
KUB_CONFIG = "/home/ec2-user/.kube/config"
IMAGE_ID = "maxtuecke/cs498-mp12"
FREE_JOB_YAML = "./free_job_spec.yaml"
PREMIUM_JOB_YAML = "./premium_job_spec.yaml"

config.load_kube_config(KUB_CONFIG)
v1 = client.CoreV1Api()
app = Flask(__name__)
# app.run(debug = True)

def generate_id():
    return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(6))

def kube_create_job_object(name, container_image, namespace="default", container_name="jobcontainer", env_vars={}):
    """
    Create a k8 Job Object
    Minimum definition of a job object:
    {'api_version': None, - Str
    'kind': None,     - Str
    'metadata': None, - Metada Object
    'spec': None,     -V1JobSpec
    'status': None}   - V1Job Status
    Docs: https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1Job.md
    Docs2: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec
    Also docs are pretty pretty bad. Best way is to ´pip install kubernetes´ and go via the autogenerated code
    And figure out the chain of objects that you need to hold a final valid object So for a job object you need:
    V1Job -> V1ObjectMeta
          -> V1JobStatus
          -> V1JobSpec -> V1PodTemplate -> V1PodTemplateSpec -> V1Container
    
    Now the tricky part, is that V1Job.spec needs a .template, but not a PodTemplateSpec, as such
    you need to build a PodTemplate, add a template field (template.template) and make sure
    template.template.spec is now the PodSpec.
    Then, the V1Job.spec needs to be a JobSpec which has a template the template.template field of the PodTemplate.
    Failure to do so will trigger an API error.
    Also Containers must be a list!
    Docs3: https://github.com/kubernetes-client/python/issues/589
    """
    # Body is the object Body
    body = client.V1Job(api_version="batch/v1", kind="Job")
    # Body needs Metadata
    # Attention: Each JOB must have a different name!
    body.metadata = client.V1ObjectMeta(namespace=namespace, name=name)
    # And a Status
    body.status = client.V1JobStatus()
     # Now we start with the Template...
    template = client.V1PodTemplate()
    template.template = client.V1PodTemplateSpec()
    # Passing Arguments in Env:
    env_list = []
    for env_name, env_value in env_vars.items():
        env_list.append( client.V1EnvVar(name=env_name, value=env_value) )
    container = client.V1Container(name=container_name, image=container_image, env=env_list)
    template.template.spec = client.V1PodSpec(containers=[container], restart_policy='Never')
    # And finaly we can create our V1JobSpec!
    body.spec = client.V1JobSpec(ttl_seconds_after_finished=600, template=template.template)
    return body

@app.route('/config', methods=['GET'])
def get_config():
    output = {"pods": []}

    pods = v1.list_pod_for_all_namespaces(watch=False)
    for item in pod.items:
        p = {"node" item.spec.node_name: , "ip" : item.status.pod_ip, "namespace" : item.metadata.namespace, "name" : item.metadata.name, "status" : item.status.phase}
        output["pods"].append(p)

    output = json.dumps(output)
    return output

@app.route('/img-classification/free',methods=['POST'])
def post_free():
    #ENV_VARS = {"DATASET" : "mnist", "TYPE" : "ff"}
    NAMESPACE = "free-service"

    job = yaml.safe_load(open(FREE_JOB_YAML))
    #body = kube_create_job_object(f"free-mnist-{generate_id()}", IMAGE_ID, env_vars=ENV_VARS)
    
    try:
        #api_response = v1.create_namespaced_job(NAMESPACE, body)
        api_response = v1.create_namespaced_job(NAMESPACE, job)
    except Exception as e:
        return Response("{'status':'failed'}", status=400, mimetype='application/json')

    if api_response.status.failed > 0:
        return Response("{'status':'failed'}", status=400, mimetype='application/json')
    else:
        return Response("{'status':'success'}", status=200, mimetype='application/json')


@app.route('/img-classification/premium', methods=['POST'])
def post_premium():
    #ENV_VARS = {"DATASET" : "kmnist", "TYPE" : "cnn"}
    NAMESPACE = "default"

    job = yaml.safe_load(open(FREE_JOB_YAML))
    #body = kube_create_job_object(f"premium-kmnist-{generate_id()}", IMAGE_ID, env_vars=ENV_VARS)
    
    try:
        #api_response = v1.create_namespaced_job(NAMESPACE, body)
        api_response = v1.create_namespaced_job(NAMESPACE, job)
    except Exception as e:
        return Response("{'status':'failed'}", status=400, mimetype='application/json')

    if api_response.status.failed > 0:
        return Response("{'status':'failed'}", status=400, mimetype='application/json')
    else:
        return Response("{'status':'success'}", status=200, mimetype='application/json')

    
if __name__ == "__main__":
    app.run(host='0.0.0.0',port=5000)
